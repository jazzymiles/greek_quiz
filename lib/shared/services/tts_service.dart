import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:flutter_tts/flutter_tts.dart';
import 'package:flutter/foundation.dart';
import 'package:audio_session/audio_session.dart';

class TtsService {
  final FlutterTts _flutterTts = FlutterTts();

  Future<void> speak(String text, String langCode) async {
    final session = await AudioSession.instance;
    await session.setActive(true);

    if (text.isEmpty) return;

    final ttsLangCode = switch (langCode) {
      'el' => 'el-GR',
      'ru' => 'ru-RU',
      'en' => 'en-US',
      _ => 'el-GR',
    };

    try {
      await _flutterTts.setLanguage(ttsLangCode);

      // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï ‚Ññ1: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É —Ç–æ–Ω–∞ (pitch)
      // –ó–Ω–∞—á–µ–Ω–∏–µ 1.0 ‚Äî —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π, –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π —Ç–æ–Ω –≥–æ–ª–æ—Å–∞.
      await _flutterTts.setPitch(1.0);

      // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï ‚Ññ2: –°–ª–µ–≥–∫–∞ –∑–∞–º–µ–¥–ª—è–µ–º —Ä–µ—á—å –¥–ª—è –±–æ–ª—å—à–µ–π —è—Å–Ω–æ—Å—Ç–∏
      await _flutterTts.setSpeechRate(0.4);

      await _flutterTts.speak(text);
    } catch (e) {
      print("üî• –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ speak: $e");
    }
  }
}

final ttsServiceProvider = Provider<TtsService>((ref) {
  return TtsService();
});