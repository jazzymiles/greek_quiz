import 'dart:async';
import 'dart:io' show Platform;

import 'package:audio_session/audio_session.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:flutter_tts/flutter_tts.dart';

class TtsService {
  final FlutterTts _tts = FlutterTts();
  Completer<void>? _speechCompleter;
  String? _currentLang; // –∫—ç—à–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —è–∑—ã–∫

  TtsService() {
    _initTts();
  }

  void _initTts() {
    // –ñ–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ–≥–æ–≤–∞—Ä–∏–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ –∫–æ–ª–±—ç–∫
    _tts.setCompletionHandler(() {
      if (_speechCompleter != null && !_speechCompleter!.isCompleted) {
        _speechCompleter!.complete();
      }
    });

    _tts.setErrorHandler((msg) {
      // ignore: avoid_print
      print("üî• TTS error: $msg");
      if (_speechCompleter != null && !_speechCompleter!.isCompleted) {
        _speechCompleter!.complete();
      }
    });

    // –í–∫–ª—é—á–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –Ω–∞ —É—Ä–æ–≤–Ω–µ –ø–ª–∞–≥–∏–Ω–∞ (–æ—Å–æ–±–µ–Ω–Ω–æ –≤–∞–∂–Ω–æ –Ω–∞ Android)
    // ignore: discarded_futures
    _tts.awaitSpeakCompletion(true);
  }

  Future<void> speak(String text, String langCode) async {
    if (text.trim().isEmpty) return;

    final session = await AudioSession.instance;
    await session.setActive(true);

    // –ù–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö Android –ø–æ—Å–ª–µ lock/unlock setLanguage –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è,
    // –µ—Å–ª–∏ –Ω–µ –ø—Ä–µ—Ä–≤–∞—Ç—å —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–∏–≥—Ä—ã—à. –°–Ω–∞—á–∞–ª–∞ —Å—Ç–æ–ø.
    try {
      await _tts.stop();
    } catch (_) {}

    _speechCompleter = Completer<void>();

    final ttsLangCode = switch (langCode) {
      'el' => 'el-GR',
      'ru' => 'ru-RU',
      'en' => 'en-US',
      _ => 'el-GR',
    };

    try {
      if (_currentLang != ttsLangCode) {
        await _tts.setLanguage(ttsLangCode);
        _currentLang = ttsLangCode;

        // –ù–∞ Android –¥–∞—ë–º –¥–≤–∏–∂–∫—É –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –≥–æ–ª–æ—Å
        if (Platform.isAndroid) {
          await Future.delayed(const Duration(milliseconds: 60));
        }
      }

      // —É–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∂–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
      await _tts.awaitSpeakCompletion(true);

      await _tts.speak(text);

      // —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞ –æ—Ç ¬´–≤–µ—á–Ω–æ–≥–æ –æ–∂–∏–¥–∞–Ω–∏—è¬ª, –µ—Å–ª–∏ completion –Ω–µ –ø—Ä–∏–ª–µ—Ç–µ–ª
      return _speechCompleter!.future.timeout(
        const Duration(seconds: 30),
        onTimeout: () {
          if (!_speechCompleter!.isCompleted) {
            _speechCompleter!.complete();
          }
        },
      );
    } catch (e) {
      // ignore: avoid_print
      print("üî• TTS speak exception: $e");
      if (_speechCompleter != null && !_speechCompleter!.isCompleted) {
        _speechCompleter!.complete();
      }
    }
  }

  Future<void> stop() async {
    try {
      await _tts.stop();
    } finally {
      if (_speechCompleter != null && !_speechCompleter!.isCompleted) {
        _speechCompleter!.complete();
      }
    }
  }

  // –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —Å–∫–æ—Ä–æ—Å—Ç—å/—Ç–æ–Ω –º–æ–∂–Ω–æ –¥—ë—Ä–≥–∞—Ç—å –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫, –∫–æ–≥–¥–∞ –¥–æ–±–∞–≤–∏—à—å UI
  Future<void> setRate(double rate) => _tts.setSpeechRate(rate);
  Future<void> setPitch(double pitch) => _tts.setPitch(pitch);
}

final ttsServiceProvider = Provider<TtsService>((ref) {
  return TtsService();
});
